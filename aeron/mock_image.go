// Copyright 2016 Stanislav Liberman
// Copyright 2022 Steven Stern
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// If Image changes, recreate the mock code with the below command.
// mockery --name=Image --inpackage --structname=MockImage --print

// Code generated by mockery v2.14.0. DO NOT EDIT.

package aeron

import (
	term "github.com/lirm/aeron-go/aeron/logbuffer/term"
	mock "github.com/stretchr/testify/mock"
)

// MockImage is an autogenerated mock type for the Image type
type MockImage struct {
	mock.Mock
}

// ActiveTransportCount provides a mock function with given fields:
func (_m *MockImage) ActiveTransportCount() int32 {
	ret := _m.Called()

	var r0 int32
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	return r0
}

// BoundedPoll provides a mock function with given fields: handler, limitPosition, fragmentLimit
func (_m *MockImage) BoundedPoll(handler term.FragmentHandler, limitPosition int64, fragmentLimit int) int {
	ret := _m.Called(handler, limitPosition, fragmentLimit)

	var r0 int
	if rf, ok := ret.Get(0).(func(term.FragmentHandler, int64, int) int); ok {
		r0 = rf(handler, limitPosition, fragmentLimit)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *MockImage) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ControlledPoll provides a mock function with given fields: handler, fragmentLimit
func (_m *MockImage) ControlledPoll(handler term.ControlledFragmentHandler, fragmentLimit int) int {
	ret := _m.Called(handler, fragmentLimit)

	var r0 int
	if rf, ok := ret.Get(0).(func(term.ControlledFragmentHandler, int) int); ok {
		r0 = rf(handler, fragmentLimit)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// CorrelationID provides a mock function with given fields:
func (_m *MockImage) CorrelationID() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// IsClosed provides a mock function with given fields:
func (_m *MockImage) IsClosed() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsEndOfStream provides a mock function with given fields:
func (_m *MockImage) IsEndOfStream() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Poll provides a mock function with given fields: handler, fragmentLimit
func (_m *MockImage) Poll(handler term.FragmentHandler, fragmentLimit int) int {
	ret := _m.Called(handler, fragmentLimit)

	var r0 int
	if rf, ok := ret.Get(0).(func(term.FragmentHandler, int) int); ok {
		r0 = rf(handler, fragmentLimit)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Position provides a mock function with given fields:
func (_m *MockImage) Position() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// SessionID provides a mock function with given fields:
func (_m *MockImage) SessionID() int32 {
	ret := _m.Called()

	var r0 int32
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	return r0
}

// SubscriptionRegistrationID provides a mock function with given fields:
func (_m *MockImage) SubscriptionRegistrationID() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// TermBufferLength provides a mock function with given fields:
func (_m *MockImage) TermBufferLength() int32 {
	ret := _m.Called()

	var r0 int32
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	return r0
}

type mockConstructorTestingTNewMockImage interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockImage creates a new instance of MockImage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockImage(t mockConstructorTestingTNewMockImage) *MockImage {
	mock := &MockImage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}